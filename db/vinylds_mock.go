// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package db

import (
	"sync"
)

// Ensure, that VinylDSMock does implement VinylDS.
// If this is not the case, regenerate this file with moq.
var _ VinylDS = &VinylDSMock{}

// VinylDSMock is a mock implementation of VinylDS.
//
// 	func TestSomethingThatUsesVinylDS(t *testing.T) {
//
// 		// make and configure a mocked VinylDS
// 		mockedVinylDS := &VinylDSMock{
// 			RetrieveArtistsFunc: func() error {
// 				panic("mock out the RetrieveArtists method")
// 			},
// 		}
//
// 		// use mockedVinylDS in code that requires VinylDS
// 		// and then make assertions.
//
// 	}
type VinylDSMock struct {
	// RetrieveArtistsFunc mocks the RetrieveArtists method.
	RetrieveArtistsFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// RetrieveArtists holds details about calls to the RetrieveArtists method.
		RetrieveArtists []struct {
		}
	}
	lockRetrieveArtists sync.RWMutex
}

// RetrieveArtists calls RetrieveArtistsFunc.
func (mock *VinylDSMock) RetrieveArtists() error {
	if mock.RetrieveArtistsFunc == nil {
		panic("VinylDSMock.RetrieveArtistsFunc: method is nil but VinylDS.RetrieveArtists was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRetrieveArtists.Lock()
	mock.calls.RetrieveArtists = append(mock.calls.RetrieveArtists, callInfo)
	mock.lockRetrieveArtists.Unlock()
	return mock.RetrieveArtistsFunc()
}

// RetrieveArtistsCalls gets all the calls that were made to RetrieveArtists.
// Check the length with:
//     len(mockedVinylDS.RetrieveArtistsCalls())
func (mock *VinylDSMock) RetrieveArtistsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRetrieveArtists.RLock()
	calls = mock.calls.RetrieveArtists
	mock.lockRetrieveArtists.RUnlock()
	return calls
}
